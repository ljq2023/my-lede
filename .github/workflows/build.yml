name: Build LEDE for Xiaomi Mi Router 3
on:
  workflow_dispatch:
  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: mi-r3.config
  DIY_SH: diy.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
            libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
            mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
            libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
            vim wget xmlto xxd zlib1g-dev python3-setuptools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name: Load custom feeds and add additional sources
        run: |
          cd openwrt
          # 添加额外的feeds源以支持更多插件
          echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >>feeds.conf.default
          echo 'src-git small https://github.com/kenzok8/small' >>feeds.conf.default
          echo 'src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages' >>feeds.conf.default
          echo 'src-git passwall2 https://github.com/xiaorouji/openwrt-passwall2' >>feeds.conf.default
          echo 'src-git helloworld https://github.com/fw876/helloworld' >>feeds.conf.default
          cat feeds.conf.default
          
      - name: Update and install feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
        
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd openwrt
          # 如果有自定义脚本就执行
          [ -f "$GITHUB_WORKSPACE/$DIY_SH" ] && chmod +x "$GITHUB_WORKSPACE/$DIY_SH" && "$GITHUB_WORKSPACE/$DIY_SH" || true
          
      - name: Generate configuration for Mi Router 3 with required plugins
        run: |
          cd openwrt
          # 生成包含所需插件的小米路由器3配置
          cat > .config << 'EOF'
          # 目标设备 - 小米路由器3
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7620=y
          CONFIG_TARGET_ramips_mt7620_DEVICE_xiaomi_mir3=y
          
          # 基础系统
          CONFIG_PACKAGE_kmod-usb-core=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb-storage=y
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-vfat=y
          CONFIG_PACKAGE_block-mount=y
          
          # LuCI Web界面
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-ssl-openssl=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-app-upnp=y
          
          # 你要求的插件
          # PassWall2
          CONFIG_PACKAGE_luci-app-passwall2=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Sing_Box=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Simple_Obfs=y
          CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_V2ray_Plugin=y
          
          # Sing-Box (如果有独立包)
          CONFIG_PACKAGE_sing-box=y
          CONFIG_PACKAGE_luci-app-sing-box=y
          
          # NaiveProxy
          CONFIG_PACKAGE_naiveproxy=y
          
          # Hysteria2
          CONFIG_PACKAGE_hysteria=y
          
          # KMS激활服务
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_vlmcsd=y
          
          # 上网时间控制
          CONFIG_PACKAGE_luci-app-accesscontrol=y
          
          # 其他有用的插件
          CONFIG_PACKAGE_luci-app-ddns=y
          CONFIG_PACKAGE_luci-app-filetransfer=y
          CONFIG_PACKAGE_luci-app-autoreboot=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-diskman=y
          
          # 语言包
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_LUCI_LANG_en=y
          
          # 网络工具
          CONFIG_PACKAGE_wget-ssl=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_iperf3=y
          CONFIG_PACKAGE_tcpdump=y
          CONFIG_PACKAGE_nftables=y
          CONFIG_PACKAGE_kmod-nft-offload=y
          
          # 文件系统工具
          CONFIG_PACKAGE_e2fsprogs=y
          CONFIG_PACKAGE_ntfs-3g=y
          CONFIG_PACKAGE_fdisk=y
          
          # 编辑器
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_vim=y
          
          # 依赖包
          CONFIG_PACKAGE_ca-certificates=y
          CONFIG_PACKAGE_ca-bundle=y
          CONFIG_PACKAGE_openssl-util=y
          CONFIG_PACKAGE_libopenssl=y
          CONFIG_PACKAGE_libcurl=y
          CONFIG_PACKAGE_zlib=y
          CONFIG_PACKAGE_libpcre=y
          CONFIG_PACKAGE_libuci-lua=y
          CONFIG_PACKAGE_lua=y
          CONFIG_PACKAGE_luasec=y
          CONFIG_PACKAGE_luasocket=y
          
          # 内核模块
          CONFIG_PACKAGE_kmod-ipt-nat=y
          CONFIG_PACKAGE_kmod-tun=y
          CONFIG_PACKAGE_kmod-inet-diag=y
          
          # 默认设置
          CONFIG_PACKAGE_default-settings=y
          
          # 编译选项
          CONFIG_DEVEL=y
          CONFIG_CCACHE=y
          CONFIG_BUILD_LOG=y
          
          # IPv6支持
          CONFIG_PACKAGE_odhcp6c=y
          CONFIG_PACKAGE_odhcpd-ipv6only=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_kmod-ipv6=y
          
          EOF
          
          make defconfig
          
      - name: Download package sources
        id: package
        run: |
          cd openwrt
          echo "开始下载软件包..."
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          echo "软件包下载完成"
          
      - name: Compile Mi Router 3 firmware with required plugins
        id: compile
        run: |
          cd openwrt
          echo "开始编译小米路由器3固件 (包含 naive, hysteria2, passwall2, kms, sing-box, 上网时间控制)"
          echo "使用 $(nproc) 个线程进行编译..."
          make -j$(nproc) || make -j2 V=s
          echo "::set-output name=status::success"
          echo "编译完成！检查生成的文件..."
          if [ -d "bin/targets/ramips/mt7620" ]; then
            ls -la bin/targets/ramips/mt7620/
            echo "固件文件列表:"
            find bin/targets/ramips/mt7620/ -name "*.bin" -o -name "*sysupgrade*" | head -10
          else
            echo "错误：未找到编译输出目录"
            ls -la bin/targets/ || echo "targets目录不存在"
          fi
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
      - name: Check space usage
        if: (!cancelled())
        run: df -hT
        
      - name: Upload bin directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin
          
      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/ramips/mt7620
          rm -rf packages
          echo "找到的固件文件:"
          ls -la *.bin 2>/dev/null || echo "没有找到.bin文件"
          ls -la *sysupgrade* 2>/dev/null || echo "没有找到sysupgrade文件"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          
      - name: Upload firmware directory
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: Mi-Router-3-Custom-Firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          
      - name: Upload IPK packages
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && !cancelled()
        with:
          name: Mi-Router-3-IPK-Packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/packages/
